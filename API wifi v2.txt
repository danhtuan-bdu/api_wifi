# ===========================
# STEP 0: C·∫•u h√¨nh b·∫£o m·∫≠t v√† b·ªè ki·ªÉm SSL
# ===========================
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $true }

# ===========================
# STEP 1: Th√¥ng tin Controller v√† t√†i kho·∫£n
# ===========================
$controller = "https://192.168.88.50:8443"
$username   = "datuan"
$password   = "*Bdu@cds2025"
$session    = New-Object Microsoft.PowerShell.Commands.WebRequestSession

# ===========================
# STEP 2: Body d·∫°ng chu·ªói JSON (kh√¥ng d√πng ConvertTo-Json)
# ===========================
$body = '{"username":"datuan","password":"*Bdu@cds2025","remember":true}'

# ===========================
# STEP 3: Headers nh∆∞ tr√¨nh duy·ªát th·∫≠t
# ===========================
$headers = @{
    "User-Agent"        = "Mozilla/5.0"
    "Referer"           = "$controller/login"
    "X-Requested-With"  = "XMLHttpRequest"
}

# ===========================
# STEP 4: ƒêƒÉng nh·∫≠p v√†o controller
# ===========================
try {
    $login = Invoke-WebRequest -Uri "$controller/api/login" `
                               -Method POST `
                               -Body $body `
                               -ContentType "application/json" `
                               -Headers $headers `
                               -WebSession $session
    Write-Host "‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå L·ªói khi ƒëƒÉng nh·∫≠p: $($_.Exception.Message)" -ForegroundColor Red
    return
}

# ===========================
# STEP 5: L·∫•y danh s√°ch thi·∫øt b·ªã
# ===========================
try {
    $devices = Invoke-RestMethod -Uri "$controller/api/s/default/stat/device" `
                                 -Method GET `
                                 -WebSession $session
    Write-Host "‚úÖ ƒê√£ l·∫•y danh s√°ch thi·∫øt b·ªã!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch thi·∫øt b·ªã: $($_.Exception.Message)" -ForegroundColor Red
    return
}

# ===========================
# STEP 6: G·∫Øn tr·∫°ng th√°i Online / Offline
# ===========================
$deviceList = $devices.data | ForEach-Object {
    [PSCustomObject]@{
        Name    = $_.name
        IP      = $_.ip
        MAC     = $_.mac
        Type    = $_.type
        Version = $_.version
        Status  = if ($_.state -eq 1) { "Online" } else { "Offline" }
    }
}

# ===========================
# STEP 7: Hi·ªÉn th·ªã danh s√°ch thi·∫øt b·ªã l√™n PowerShell
# ===========================
Write-Host "`nüìã Danh s√°ch thi·∫øt b·ªã UniFi (hi·ªÉn th·ªã tr∆∞·ªõc khi ghi file):" -ForegroundColor Cyan
$deviceList | Format-Table -AutoSize

# ===========================
# STEP 8: Ghi ra file CSV
# ===========================
$csvPath = "unifi_devices_status.csv"
$deviceList | Export-Csv -Path $csvPath -NoTypeInformation -Encoding UTF8
Write-Host "`n‚úÖ File CSV ƒë√£ ƒë∆∞·ª£c t·∫°o: $csvPath" -ForegroundColor Yellow
