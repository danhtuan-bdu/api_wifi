# ======================
# STEP 0: C·∫•u h√¨nh b·∫£o m·∫≠t v√† ch·ª©ng ch·ªâ
# ======================
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $true }

# ======================
# STEP 1: C·∫•u h√¨nh controller v√† t√†i kho·∫£n
# ======================
$controller = "https://192.168.88.50:8443"
$username   = "datuan"
$password   = "*Bdu@cds2025"
$session    = New-Object Microsoft.PowerShell.Commands.WebRequestSession

# ======================
# STEP 2: T·∫°o body login JSON d·∫°ng chu·ªói (kh√¥ng d√πng ConvertTo-Json)
# ======================
$body = '{"username":"datuan","password":"*Bdu@cds2025","remember":true}'

# ======================
# STEP 3: Headers y√™u c·∫ßu ƒë·ªÉ gi·∫£ l·∫≠p tr√¨nh duy·ªát
# ======================
$headers = @{
    "User-Agent"        = "Mozilla/5.0"
    "Referer"           = "$controller/login"
    "X-Requested-With"  = "XMLHttpRequest"
}

# ======================
# STEP 4: G·ª≠i y√™u c·∫ßu ƒëƒÉng nh·∫≠p
# ======================
try {
    $login = Invoke-WebRequest -Uri "$controller/api/login" `
                               -Method POST `
                               -Body $body `
                               -ContentType "application/json" `
                               -Headers $headers `
                               -WebSession $session

    Write-Host "‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå L·ªói khi ƒëƒÉng nh·∫≠p: $($_.Exception.Message)" -ForegroundColor Red
    return
}

# ======================
# STEP 5: G·ª≠i y√™u c·∫ßu l·∫•y danh s√°ch thi·∫øt b·ªã
# ======================
try {
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    $devices = Invoke-RestMethod -Uri "$controller/api/s/default/stat/device" `
                                 -Method GET `
                                 -WebSession $session

    Write-Host "‚úÖ L·∫•y danh s√°ch thi·∫øt b·ªã th√†nh c√¥ng!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch thi·∫øt b·ªã: $($_.Exception.Message)" -ForegroundColor Red
    return
}

# ======================
# STEP 6: In k·∫øt qu·∫£ ra m√†n h√¨nh
# ======================
$devices.data | Select name, ip, mac, type, version, state

# ======================
# (T√πy ch·ªçn) STEP 7: Xu·∫•t ra file CSV
# ======================
$devices.data |
    Select name, ip, mac, type, version |
    Export-Csv -Path "unifi_devices.csv" -NoTypeInformation -Encoding UTF8

Write-Host "üìÑ ƒê√£ l∆∞u danh s√°ch thi·∫øt b·ªã t·∫°i: unifi_devices.csv" -ForegroundColor Cyan

$devices.data | ForEach-Object {
    [PSCustomObject]@{
        name    = $_.name
        ip      = $_.ip
        mac     = $_.mac
        type    = $_.type
        version = $_.version
        status  = if ($_.state -eq 1) { "Online" } else { "Offline" }
    }
} | Export-Csv -Path "unifi_devices_status.csv" -NoTypeInformation -Encoding UTF8

Write-Host "üìÑ ƒê√£ l∆∞u tr·∫°ng th√°i thi·∫øt b·ªã: unifi_devices_status.csv" -ForegroundColor Cyan


